# Direccion del repositorio remoto para la creacion de vagrant
repo_branch = "main"
remote_repo = "https://raw.githubusercontent.com/MartinSIbarra/free-hosting-with-local-architecture/refs/heads/#{repo_branch}/assets"

if repo_branch != "main" then
  puts "-> Usando rama: #{repo_branch}"
  puts "-> Url: #{remote_repo}"
end

require 'open-uri'

def download_file(url, file)
  unless File.exist?(file)
    remote_file = "#{url}/#{file}"
    10.times do |i|
      begin
        URI.open(remote_file, read_timeout: 10) { |r| File.write(file, r.read) }
      rescue => e
        puts "Error: #{e.message}"
        if i < 9 then sleep 5 else abort "Fall贸 tras 10 intentos." end
      end
    end
  end
end

download_file(remote_repo, "provision_scripts.rb")
load './provision_scripts.rb'

download_file(remote_repo, "helpers.rb")
load './helpers.rb'

# Configuraci贸n de maquina vagrant para la distintos entornos
servers = {
  "devops-server" => { 
    server_type: "devops",
    name: "DevOps",
    ip: "192.168.0.170", 
    ssh_port: 2230,
    tunnel_config_required: true
  },
  "prod-server" => {
    server_type: "prod",
    name: "Producci贸n",
    ip: "192.168.0.171", 
    ssh_port: 2231,
    tunnel_config_required: false
  },
  "uat-server" => {
    server_type: "uat",
    name: "UAT",
    ip: "192.168.0.172", 
    ssh_port: 2232,
    tunnel_config_required: false
  }
}
# Configuraci贸n de las carpetas compartidas
shared_folders = [
  {host: ".", guest: "/home/vagrant/fs"},
]

# Incio del script para la configuracion de la maquina virtual
Vagrant.configure("2") do |config|
  
  host = get_host_name(servers)
  os = get_operative_system()
  bridge_interface = get_bridge_interface(os)
  guest_additions_iso = get_guest_additions_iso(os)
  
  config.vm.box = "debian/bookworm64"
  config.vm.box_version = "12.20250126.1"
  config.vm.hostname = host
  config.vm.network "forwarded_port", guest: 22, host: servers[host][:ssh_port], id: "ssh"
  config.vm.network "public_network", ip: servers[host][:ip], bridge: bridge_interface
  shared_folders.each do |shared_folder|
    config.vm.synced_folder shared_folder[:host], shared_folder[:guest]
  end
  config.vm.provider "virtualbox" do |vb|
    # vb.memory = "1024"
    vb.name = host
    vb.customize ["storageattach", :id,
      "--storagectl", "SATA Controller",
      "--port", "2", "--device", "0",
      "--type", "dvddrive",
      "--medium", guest_additions_iso]
  end

  #Aprovisionamiento de la maquina virtual con lo minimo
  config.vm.provision "init", type: "shell", inline: configuracion_inicial()
  config.vm.provision "post1", type: "shell", run: "never", inline: accesorios()
  config.vm.provision "post2", type: "shell", run: "never", inline: virtualbox_ga()
  #Aprovisionamiento de la maquina virtual con el script para la configuracion para el servidor
  config.vm.provision "post3", type: "shell", run: "never", inline: remote_provision_script(repo_branch, remote_repo, servers[host][:server_type], get_ngrok_data(host, servers))
end
